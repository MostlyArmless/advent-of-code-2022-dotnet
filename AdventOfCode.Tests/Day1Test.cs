namespace AdventOfCode.Tests;

public class Day1Test
{
  public static IEnumerable<object[]> TestData => new List<object[]>
  {
    new object[] { @"1000
2000
3000

4000

5000
6000

7000
8000
9000

10000", new int[] { 6000, 4000, 11000, 24000, 10000 }, 24000 },
    new object[] {
        File.ReadAllText(Path.Combine(Directory.GetCurrentDirectory(), @"./inputs/day1.txt")),
        new int[] { 44656, 37309, 61414, 46451, 63003, 56938, 19015, 52576, 42195, 37776, 44494, 49093, 50107, 69208, 42514, 64884, 37290, 54019, 63642, 50966, 46388, 39999, 35735, 48795, 64121, 34694, 59495, 50937, 56474, 53940, 51964, 47221, 53117, 48351, 35164, 61370, 56735, 43400, 24556, 44701, 55972, 69795, 37522, 46861, 40878, 50946, 56899, 58245, 47679, 37661, 63563, 52003, 30675, 33301, 52328, 44415, 36217, 31551, 46988, 53493, 41276, 52518, 41843, 56314, 50964, 40589, 45576, 60351, 50512, 41222, 49097, 48919, 55204, 43222, 41104, 54101, 48622, 16802, 53188, 49929, 61136, 50539, 44039, 40342, 42265, 47925, 43066, 57865, 18647, 53436, 29191, 54977, 39298, 45612, 50439, 51713, 52349, 46612, 42773, 35231, 52875, 49221, 33123, 32066, 60039, 46592, 37731, 46585, 52003, 52682, 59100, 63902, 43636, 9229, 43621, 42829, 24070, 55200, 48732, 30210, 52604, 33321, 60681, 21789, 45585, 59985, 36511, 45565, 39066, 59791, 22842, 62517, 57662, 45929, 30409, 59348, 40144, 58400, 46673, 58188, 37989, 50179, 47683, 52908, 43745, 43447, 47129, 30055, 41856, 55560, 32143, 46605, 44022, 51017, 56596, 45408, 15139, 56855, 51771, 36009, 57881, 61929, 52545, 51053, 47000, 55301, 65240, 48194, 18893, 38279, 58372, 49234, 49577, 53086, 47429, 60586, 49999, 50443, 53969, 34725, 29210, 57682, 36367, 45232, 57212, 36435, 55868, 48072, 53101, 45625, 52473, 63398, 41766, 54780, 49670, 47770, 50113, 53982, 34477, 56031, 52341, 45968, 50527, 45820, 54226, 56617, 56741, 41778, 58865, 46390, 44548, 53249, 31462, 50372, 52386, 51788, 52528, 48669, 27786, 59362, 56824, 46853, 54023, 52997, 43851, 38744, 39038, 53826, 9615, 51619, 51177, 48160, 64545, 48789, 52296, 60574, 35764, 56488, 45185, 38395, 49788, 37259, 33768, 33635, 47323, 6342, 56560, 54481, 69434, 37275, 57769, 52678, 57347, 23332, 50628, 43935, 40734, 42960, 39671, 57188, 55805, 55987, 43676, 48165 },
        69795
    }
  };


  [Theory]
  [MemberData(nameof(TestData))]
  public void TestExample(string inputString, int[] expectedCaloriesPerElf, int expectedCaloriesOfElfCarryingTheMostCalories)
  {
    var elves = Day1.CalculateCaloriesPerElf(inputString);
    var maxElfCalories = Day1.GetTotalCaloriesOfElfCarryTheMostCalories(elves);

    Assert.Equal(expectedCaloriesPerElf, elves);
    Assert.Equal(expectedCaloriesOfElfCarryingTheMostCalories, maxElfCalories);
  }
}